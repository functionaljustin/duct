Temp notes about lazy list 

Talk about lazy val first

first steps at lazy list

case class MyLazyList[A](val head: () => A, val tail: Option[MyLazyList[A]]) {
        lazy val first: A = head()
        lazy val rest = tail(first)
}

questions?

how to make an infinite repeated list like (1,1,1,1)
how to make a computed list like the fibonacci sequence

how to map flatmap and so on 

that type signature tho

final classLazyList[+A] extends AbstractSeq[A] with LinearSeq[A] with LinearSeqOps[A, LazyList, LazyList[A]] with IterableFactoryDefaults[A, LazyList] with Serializable

how to make filter
  note filter consumes to the first thing that passes, it is not fully lazy


Scala library notes

notes about how the head is not held on to when dropping and filtering

https://github.com/scala/scala/blob/4b2151cbe4c857d49556b70c3fa0f5e236fd7754/src/library/scala/collection/immutable/LazyList.scala#L997


zip.safeTail needs to ...
be a OurLazyList

given a lazy list make a new lazy list, how?

this = 
  either a head and no tail 
    safe to return a new empty list
  or a head and a tail 
    new list should have the head of the tail and the tail of the tail

  or no head or tail 
    result should be an empty list



